---
# Source: helm/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.3
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: helm/charts/nats/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-nats
  namespace: default
  labels:
    helm.sh/chart: nats-0.18.0
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nats
      app.kubernetes.io/instance: release-name
---
# Source: helm/charts/redis/templates/master/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.3
    app.kubernetes.io/component: master
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
---
# Source: helm/charts/gateway-helm/templates/envoy-gateway-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: envoy-gateway
  namespace: 'default'
  labels:
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: helm/charts/nats/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-nats
  namespace: default
  labels:
    helm.sh/chart: nats-0.18.0
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: helm/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.3
---
# Source: helm/templates/secret.yaml
apiVersion: v1
data:
  license: MTIzNDU=
kind: Secret
metadata:
  name: release-name-secret
  namespace: default
  labels:
    version: v4
---
# Source: helm/charts/gateway-helm/templates/envoy-gateway-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-gateway-config
  namespace: 'default'
  labels:
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
data:
  envoy-gateway.yaml: |
    apiVersion: gateway.envoyproxy.io/v1alpha1
    kind: EnvoyGateway
    gateway:
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
    logging:
      level:
        default: info
    provider:
      kubernetes:
        rateLimitDeployment:
          container:
            image: docker.io/envoyproxy/ratelimit:60d8e81b
          patch:
            type: StrategicMerge
            value:
              spec:
                template:
                  spec:
                    containers:
                    - imagePullPolicy: IfNotPresent
                      name: envoy-ratelimit
        shutdownManager:
          image: docker.io/envoyproxy/gateway:v1.3.0
      type: Kubernetes
---
# Source: helm/charts/nats/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-nats-config
  namespace: default
  labels:
    helm.sh/chart: nats-0.18.0
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
data:
  nats.conf: |
    # NATS Clients Port
    port: 4222

    # PID file shared with configuration reloader.
    pid_file: "/var/run/nats/nats.pid"

    ###############
    #             #
    # Monitoring  #
    #             #
    ###############
    http: 8222
    server_name:$POD_NAME
    lame_duck_grace_period: 10s
    lame_duck_duration: 30s
---
# Source: helm/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.3
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: helm/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.3
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: helm/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.3
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: helm/charts/gateway-helm/templates/envoy-gateway-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: release-name-gateway-helm-envoy-gateway-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  verbs:
  - update
- apiGroups:
  - multicluster.x-k8s.io
  resources:
  - serviceimports
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.envoyproxy.io
  resources:
  - envoyproxies
  - envoypatchpolicies
  - clienttrafficpolicies
  - backendtrafficpolicies
  - securitypolicies
  - envoyextensionpolicies
  - backends
  - httproutefilters
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.envoyproxy.io
  resources:
  - envoypatchpolicies/status
  - clienttrafficpolicies/status
  - backendtrafficpolicies/status
  - securitypolicies/status
  - envoyextensionpolicies/status
  - backends/status
  verbs:
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways
  - grpcroutes
  - httproutes
  - referencegrants
  - tcproutes
  - tlsroutes
  - udproutes
  - backendtlspolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways/status
  - grpcroutes/status
  - httproutes/status
  - tcproutes/status
  - tlsroutes/status
  - udproutes/status
  - backendtlspolicies/status
  verbs:
  - update
---
# Source: helm/charts/gateway-helm/templates/envoy-gateway-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-gateway-helm-envoy-gateway-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-gateway-helm-envoy-gateway-role
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: 'default'
---
# Source: helm/charts/gateway-helm/templates/infra-manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-gateway-helm-infra-manager
  namespace: 'default'
  labels:
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  - services
  - configmaps
  verbs:
  - create
  - get
  - delete
  - deletecollection
  - patch
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  verbs:
  - create
  - get
  - delete
  - deletecollection
  - patch
- apiGroups:
  - autoscaling
  - policy
  resources:
  - horizontalpodautoscalers
  - poddisruptionbudgets
  verbs:
  - create
  - get
  - delete
  - deletecollection
  - patch
---
# Source: helm/charts/gateway-helm/templates/leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-gateway-helm-leader-election-role
  namespace: 'default'
  labels:
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: helm/charts/gateway-helm/templates/infra-manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-gateway-helm-infra-manager
  namespace: 'default'
  labels:
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'release-name-gateway-helm-infra-manager'
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: 'default'
---
# Source: helm/charts/gateway-helm/templates/leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-gateway-helm-leader-election-rolebinding
  namespace: 'default'
  labels:
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'release-name-gateway-helm-leader-election-role'
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: 'default'
---
# Source: helm/charts/gateway-helm/templates/envoy-gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: envoy-gateway
  namespace: 'default'
  labels:
    control-plane: envoy-gateway
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    control-plane: envoy-gateway
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
  ports:
  - name: grpc
    port: 18000
    targetPort: 18000
  - name: ratelimit
    port: 18001
    targetPort: 18001
  - name: wasm
    port: 18002
    targetPort: 18002
  - name: metrics
    port: 19001
    targetPort: 19001
---
# Source: helm/charts/mysql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mysql
  namespace: default
  labels:
    app: release-name-mysql
spec:
  ports:
  - name: tcp-mysql
    port: 3306
    targetPort: 3306
  selector:
    app: release-name-mysql
---
# Source: helm/charts/nats/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-nats
  namespace: default
  labels:
    helm.sh/chart: nats-0.18.0
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: client
    port: 4222
    appProtocol: tcp
  - name: cluster
    port: 6222
    appProtocol: tcp
  - name: monitor
    port: 8222
    appProtocol: http
  - name: metrics
    port: 7777
    appProtocol: http
  - name: leafnodes
    port: 7422
    appProtocol: tcp
  - name: gateways
    port: 7522
    appProtocol: tcp
---
# Source: helm/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.3
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: redis
---
# Source: helm/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.3
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: helm/templates/api-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-api
  namespace: default
  labels:
    app: api
    version: v4
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: release-name-api
---
# Source: helm/templates/ascii-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-ascii
  namespace: default
  labels:
    app: ascii
    version: v4
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: release-name-ascii
---
# Source: helm/templates/data-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-data
  namespace: default
  labels:
    app: data
    version: v4 
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: release-name-data
---
# Source: helm/templates/img-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-img
  namespace: default
  labels:
    app: img
    version: v4
spec:      
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: release-name-img
---
# Source: helm/charts/gateway-helm/templates/envoy-gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy-gateway
  namespace: 'default'
  labels:
    control-plane: envoy-gateway
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: envoy-gateway
      app.kubernetes.io/name: gateway-helm
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        prometheus.io/port: "19001"
        prometheus.io/scrape: "true"
      labels:
        control-plane: envoy-gateway
        app.kubernetes.io/name: gateway-helm
        app.kubernetes.io/instance: release-name
    spec:
      containers:
      - args:
        - server
        - --config-path=/config/envoy-gateway.yaml
        env:
        - name: ENVOY_GATEWAY_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: cluster.local
        image: docker.io/envoyproxy/gateway:v1.3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: envoy-gateway
        ports:
        - containerPort: 18000
          name: grpc
        - containerPort: 18001
          name: ratelimit
        - containerPort: 18002
          name: wasm
        - containerPort: 19001
          name: metrics
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /config
          name: envoy-gateway-config
          readOnly: true
        - mountPath: /certs
          name: certs
          readOnly: true
      imagePullSecrets: []
      serviceAccountName: envoy-gateway
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          defaultMode: 420
          name: envoy-gateway-config
        name: envoy-gateway-config
      - name: certs
        secret:
          secretName: envoy-gateway
---
# Source: helm/charts/mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mysql
  namespace: default
  labels:
    service: release-name-mysql
spec:
  selector:
    matchLabels:
      app: release-name-mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: release-name-mysql
    spec:
      containers:
      - name: mysql
        image: mysql  # or just image: percona
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "true"
        - name: MYSQL_DATABASE
          value: "demo"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 3306
---
# Source: helm/charts/nats/templates/nats-box.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-nats-box
  namespace: default
  labels:
    app: release-name-nats-box
    chart: nats-0.18.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: release-name-nats-box
  template:
    metadata:
      labels:
        app: release-name-nats-box
    spec:
      volumes:
      containers:
      - name: nats-box
        image: natsio/nats-box:0.13.0
        imagePullPolicy: IfNotPresent
        resources:
          null
        env:
        - name: NATS_URL
          value: release-name-nats
        command:
        - "tail"
        - "-f"
        - "/dev/null"
        volumeMounts:
---
# Source: helm/templates/api-deploy.yaml
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: release-name-api
  namespace: default
  labels:
    version: v4
spec:
  selector:
    matchLabels:
      app: release-name-api
  replicas: 1
  template:
    metadata:
      labels:
        app: release-name-api
        version: v4
    spec:
      containers:
      - name: api
        image: denvasyliev/k8sdiy:build-2df9a62
        command:
          - ./app
          - "-role"
          - "api"
          - "-server"
          - release-name-nats
        imagePullPolicy: Always
        env:
          - name: APP_BACKEND
            value: "iscii"
          - name: APP_DATASTORE
            value: "data"
          - name: APP_CACHE
            value: "release-name-redis-headless"
          - name: APP_LICENSE
            valueFrom:
              secretKeyRef:
                name: release-name-secret
                key: license
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
          name: http
        securityContext:
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /readinez
            port: 8080
          initialDelaySeconds: 0
          periodSeconds: 3
---
# Source: helm/templates/ascii-deploy.yaml
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: release-name-ascii
  namespace: default
  labels:
    version: v4
spec:
  selector:
    matchLabels:
      app: default-ascii
  replicas: 1
  template:
    metadata:
      labels:
        app: default-ascii
        version: v4
    spec:
      containers:
      - name: ascii
        image: denvasyliev/k8sdiy:build-2df9a62
        command:
          - ./app
          - "-role"
          - "ascii"
          - "-server"
          - release-name-nats
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
          name: http
        securityContext:
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /readinez
            port: 8080
          periodSeconds: 3
---
# Source: helm/templates/data-deploy.yaml
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: release-name-data
  namespace: default
  labels:
    version: v4
spec:
  selector:
    matchLabels:
      app: default-data
  replicas: 1
  template:
    metadata:
      labels:
        app: default-data
        version: v4
    spec:
      containers:
      - name: data
        image: denvasyliev/k8sdiy:build-2df9a62
        command:
          - ./app
          - "-role"
          - "data"
          - "-server"
          - release-name-nats
        env:
          - name: APP_DB
            value: "root@tcp(release-name-mysql:3306)/demo"
          - name: APP_CACHE
            value: "release-name-redis-headless"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
        securityContext:
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /readinez
            port: 8080
          initialDelaySeconds: 0
          periodSeconds: 3
---
# Source: helm/templates/img-deploy.yaml
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: release-name-img
  namespace: default
  labels:
    version: v4
spec:
  selector:
    matchLabels:
      app: release-name-img
  replicas: 1
  template:
    metadata:
      labels:
        app: release-name-img
        version: v4
    spec:
      containers:
      - name: img
        image: denvasyliev/k8sdiy:build-2df9a62
        command:
          - ./app
          - "-role"
          - "img"
          - "-r"
          - "0.2"
          - "-server"
          - release-name-nats
        imagePullPolicy: Always
        env:
          - name: APP_CACHE
            value: "release-name-redis-headless"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
        securityContext:
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /readinez
            port: 8080
          initialDelaySeconds: 0
          periodSeconds: 3
---
# Source: helm/charts/nats/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-nats
  namespace: default
  labels:
    helm.sh/chart: nats-0.18.0
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nats
      app.kubernetes.io/instance: release-name
  replicas: 1
  serviceName: release-name-nats

  podManagementPolicy: Parallel

  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "7777"
        prometheus.io/scrape: "true"
        checksum/config: 439fdcfc2856e4f6eca8e2783987c27d98af7eae566ce7c20a7c31d4a78ba356
      labels:
        app.kubernetes.io/name: nats
        app.kubernetes.io/instance: release-name
    spec:
      # Common volumes for the containers.
      volumes:
      - name: config-volume
        configMap:
          name: release-name-nats-config

      # Local volume shared with the reloader.
      - name: pid
        emptyDir: {}

      #################
      #               #
      #  TLS Volumes  #
      #               #
      #################

      serviceAccountName: release-name-nats

      # Required to be able to HUP signal and apply config
      # reload to the server without restarting the pod.
      shareProcessNamespace: true

      #################
      #               #
      #  NATS Server  #
      #               #
      #################
      terminationGracePeriodSeconds: 60
      containers:
      - name: nats
        image: nats:2.9.0-alpine
        imagePullPolicy: IfNotPresent
        resources:
          {}
        ports:
        - containerPort: 4222
          name: client
        - containerPort: 6222
          name: cluster
        - containerPort: 8222
          name: monitor

        command:
        - "nats-server"
        - "--config"
        - "/etc/nats-config/nats.conf"

        # Required to be able to define an environment variable
        # that refers to other environment variables.  This env var
        # is later used as part of the configuration file.
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SERVER_NAME
          value: $(POD_NAME)
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLUSTER_ADVERTISE
          value: $(POD_NAME).release-name-nats.$(POD_NAMESPACE).svc.cluster.local
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nats-config
        - name: pid
          mountPath: /var/run/nats
        

        #######################
        #                     #
        # Healthcheck Probes  #
        #                     #
        #######################
        livenessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            # for NATS server versions >=2.7.1, healthz will be enabled to allow for a grace period
            # in case of JetStream enabled deployments to form quorum and streams to catch up.
            path: /healthz
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 30

        # Gracefully stop NATS Server on pod deletion or image upgrade.
        #
        lifecycle:
          preStop:
            exec:
              # send the lame duck shutdown signal to trigger a graceful shutdown
              # nats-server will ignore the TERM signal it receives after this
              #
              command:
              - "nats-server"
              - "-sl=ldm=/var/run/nats/nats.pid"

      #################################
      #                               #
      #  NATS Configuration Reloader  #
      #                               #
      #################################
      - name: reloader
        image: natsio/nats-server-config-reloader:0.7.2
        imagePullPolicy: IfNotPresent
        resources:
          null
        command:
        - "nats-server-config-reloader"
        - "-pid"
        - "/var/run/nats/nats.pid"
        - "-config"
        - "/etc/nats-config/nats.conf"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nats-config
        - name: pid
          mountPath: /var/run/nats
        

      ##############################
      #                            #
      #  NATS Prometheus Exporter  #
      #                            #
      ##############################
      - name: metrics
        image: natsio/prometheus-nats-exporter:0.10.0
        imagePullPolicy: IfNotPresent
        resources:
          {}
        args:
        - -connz
        - -routez
        - -subz
        - -varz
        - -prefix=nats
        - -use_internal_server_id
        - http://localhost:8222/
        ports:
        - containerPort: 7777
          name: metrics

  volumeClaimTemplates:
---
# Source: helm/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.3
    app.kubernetes.io/component: master
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: release-name-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.4.0
        helm.sh/chart: redis-20.1.3
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 43cdf68c28f3abe25ce017a82f74dbf2437d1900fd69df51a55a3edf6193d141
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: release-name-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.4.0-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: helm/templates/gatewayapi.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: eg
  namespace: default
spec:
  gatewayClassName: eg
  listeners:
    - name: http
      protocol: HTTP
      port: 80
---
# Source: helm/templates/gatewayapi.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: GatewayClass
metadata:
  name: eg
spec:
  controllerName: gateway.envoyproxy.io/gatewayclass-controller
---
# Source: helm/templates/api-svc.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: release-name-helm-api
  labels:
    helm.sh/chart: helm-0.1.0
    app.kubernetes.io/name: helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  parentRefs:
    - name: eg
  hostnames:
    - "demo.example.com"
  rules:
  - backendRefs:
    - group: ""
      kind: Service
      name: release-name-api
      port: 80
      weight: 1
    matches:
    - path:
        type: PathPrefix
        value: /api
---
# Source: helm/templates/ascii-svc.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: release-name-helm-ascii
  labels:
    helm.sh/chart: helm-0.1.0
    app.kubernetes.io/name: helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  parentRefs:
    - name: eg
  hostnames:
    - "demo.example.com"
  rules:
  - backendRefs:
    - group: ""
      kind: Service
      name: release-name-ascii
      port: 80
      weight: 1
    matches:
    - path:
        type: PathPrefix
        value: /ascii
---
# Source: helm/templates/data-svc.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: release-name-helm-data
  labels:
    helm.sh/chart: helm-0.1.0
    app.kubernetes.io/name: helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  parentRefs:
    - name: eg
  hostnames:
    - "demo.example.com"
  rules:
  - backendRefs:
    - group: ""
      kind: Service
      name: release-name-data
      port: 80
      weight: 1
    matches:
    - path:
        type: PathPrefix
        value: /data
---
# Source: helm/templates/img-svc.yaml
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: release-name-helm-img
  labels:
    helm.sh/chart: helm-0.1.0
    app.kubernetes.io/name: helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  parentRefs:
    - name: eg
  hostnames:
    - "demo.example.com"
  rules:
  - backendRefs:
    - group: ""
      kind: Service
      name: release-name-img
      port: 80
      weight: 1
    matches:
    - path:
        type: PathPrefix
        value: /img
---
# Source: helm/charts/gateway-helm/templates/certgen-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-gateway-helm-certgen
  namespace: 'default'
  labels:
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
---
# Source: helm/charts/gateway-helm/templates/certgen-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-gateway-helm-certgen
  namespace: 'default'
  labels:
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
---
# Source: helm/charts/gateway-helm/templates/certgen-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-gateway-helm-certgen
  namespace: 'default'
  labels:
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'release-name-gateway-helm-certgen'
subjects:
- kind: ServiceAccount
  name: 'release-name-gateway-helm-certgen'
  namespace: 'default'
---
# Source: helm/charts/nats/templates/tests/test-request-reply.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-nats-test-request-reply"
  labels:
    chart: nats-0.18.0
    app: release-name-nats-test-request-reply
  annotations:
    "helm.sh/hook": test
spec:
  containers:
  - name: nats-box
    image: synadia/nats-box
    env:
    - name: NATS_HOST
      value: release-name-nats
    command:
    - /bin/sh
    - -ec
    - |
      nats reply -s nats://$NATS_HOST:4222 'name.>' --command "echo 1" &
    - |
      "&&"
    - |
      name=$(nats request -s nats://$NATS_HOST:4222 name.test '' 2>/dev/null)
    - |
      "&&"
    - |
      [ $name = test ]

  restartPolicy: Never
---
# Source: helm/charts/gateway-helm/templates/certgen.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-gateway-helm-certgen
  namespace: 'default'
  labels:
    helm.sh/chart: gateway-helm-1.3.0
    app.kubernetes.io/name: gateway-helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v1.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
spec:
  backoffLimit: 1
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: certgen
    spec:
      containers:
      - command:
        - envoy-gateway
        - certgen
        env:
        - name: ENVOY_GATEWAY_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: cluster.local
        image: docker.io/envoyproxy/gateway:v1.3.0
        imagePullPolicy: IfNotPresent
        name: envoy-gateway-certgen
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      imagePullSecrets: []
      restartPolicy: Never
      serviceAccountName: release-name-gateway-helm-certgen
  ttlSecondsAfterFinished: 30
